---
- name: Set oadp_state to absent if destroying workload
  set_fact:
    oadp_state: "absent"
  when: oadp_destroy is defined and oadp_destroy | bool

- name: Beta Dev catalog source - REMOVE AFTER DOWNSTREAM
  k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: CatalogSource
      metadata:
        name: oadp-operator
        namespace: openshift-marketplace
      spec:
        sourceType: grpc
        image: quay.io/dymurray/oadp-operator-index:latest
    state: "{{ oadp_state }}"


- name: "Set {{ oadp_namespace }} namespace state to {{ oadp_state }}"
  k8s:
    name: "{{ oadp_namespace }}"
    kind: Namespace
    state: "{{ oadp_state }}"

- name: "Set CAM OperatorGroup state to {{ oadp_state }}"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'oadp-operator-operatorgroup.yml.j2' ) }}"

# - name: "Set CAM Operator Subscription state to {{ oadp_state }}"
#   k8s:
#     state: "{{ oadp_state }}"
#     definition: "{{ lookup('template', 'oadp-operator-subscription-downstream.yml.j2' ) }}"

- name: "Set CAM Operator Subscription state to {{ oadp_state }} -- UPDATE AFTER DOWNSTREAM"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'oadp-operator-subscription-dev.yml.j2' ) }}"

- name: Waiting 30 seconds before checking install plan
  pause:
    seconds: 30

- when: oadp_state == 'present'
  block:
  - name: "Waiting for install plan to be created"
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: "{{ oadp_namespace }}"
    register: oadp_install_plans
    retries: 20
    delay: 
    until: oadp_install_plans.get('resources', []) | length > 0

  - name: Pause for 30 seconds for install plan to get ready for approval
    pause:
      seconds: 30

  - set_fact:
      oadp_approved_install_plan: "{{ oadp_install_plans.get('resources', [])[0]
        | combine({'spec': {'approved': true}}, recursive=true) }}"

  - name: "Approve install plan"
    k8s:
      state: present
      definition: "{{ oadp_approved_install_plan }}"

  rescue:
  - name: We will try again, trying to rescue the block
    pause:
      seconds: 10

  - name: "<rescue> Waiting for install plan to be created"
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: "{{ oadp_namespace }}"
    register: oadp_install_plans
    retries: 20
    until: oadp_install_plans.get('resources', []) | length > 0

  - name: "<rescue> Pause for 10 seconds in rescue block"
    pause:
      seconds: 10

  - set_fact:
      oadp_approved_install_plan: "{{ oadp_install_plans.get('resources', [])[0]
        | combine({'spec': {'approved': true}}, recursive=true) }}"

  - name: "<rescue> Approve install plan"
    k8s:
      state: present
      definition: "{{ oadp_approved_install_plan }}"

# - name: "Wait for OADP CRDs to exist"
#   k8s_info:
#     api_version: "apiextensions.k8s.io/v1beta1"
#     kind: CustomResourceDefinition
#     name: "{{ item }}"
#   loop: "{{ oadp_expected_crds }}"
#   register: crds
#   until: crds.resources | length > 0
#   retries: 30
#   delay: 10
#   when: not oadp_destroy | bool

# - name: "Setoadp_state }}"
#   k8s:
#     state: "{{ oadp_state }}"
#     definition: "{{ lookup('template', 'controller-4.yml.j2' ) }}"

- name: "Download lab content to bastion"
  include_tasks: "./download-content.yml"
  loop: "{{ oadp_download_content }}"
  when: student_name is defined
  loop_control:
    loop_var: "mig_download_content_item"

- when: ocs_migstorage
  block:
  - name: Discovering NooBaa S3 endpoint
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: s3
      namespace: "{{ ocs_migstorage_namespace }}"
    register: noobaa_s3_endpoint
    retries: 10
    delay: 3
    until: noobaa_s3_endpoint.resources is defined and
           noobaa_s3_endpoint.resources[0] is defined and
           noobaa_s3_endpoint.resources[0].status.ingress is defined

  - set_fact:
      noobaa_endpoint: "{{ noobaa_s3_endpoint.resources[0].status.ingress[0].host }}"
    when: noobaa_s3_endpoint.resources[0].status.ingress[0].host is defined

  - set_fact:
      noobaa_endpoint: "{{ noobaa_s3_endpoint.resources[0].status.ingress[0].hostname }}"
    when: noobaa_s3_endpoint.resources[0].status.loadBalancer.ingress[0].hostname is defined

  - name: Get MCG PV Pool secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ ocs_migstorage_bucketname }}"
      namespace: "{{ ocs_migstorage_namespace }}"
    register: ocs_migstorage_secret
    retries: 20
    delay: 3
    until: ocs_migstorage_secret.resources | length > 0

  - set_fact:
      noobaa_s3_access_key_id: "{{ ocs_migstorage_secret.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"
      noobaa_s3_secret_access_key: "{{ ocs_migstorage_secret.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"

  - name: Discovering NooBaa CA Bundle
    shell: "{{ item }}"
    loop:
    - >-
      openssl s_client -showcerts -verify 5 -connect {{ noobaa_endpoint }}:443 < /dev/null
      | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; out="cert"a".crt"; print >out}'
      && for cert in *.crt; do newname=$(openssl x509 -noout -subject -in $cert
      | sed -n 's/^.*CN=\(.*\)$/\1/; s/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem;
      mv $cert $newname; done;
    - cat *.pem
    - rm *.pem
    register: noobaa_ca_bundle_raw
    when: noobaa_s3_endpoint_proto == 'https'

  - set_fact:
      noobaa_ca_bundle: "{{ noobaa_ca_bundle_raw.results[1].stdout }}"
    when: noobaa_s3_endpoint_proto == 'https'

  - name: Creating OCS backed migstorage
    k8s:
      state: present
      definition: "{{ lookup('template', 'mig_storage.yml.j2') }}"
    vars:
      noobaa_s3_url: "{{ noobaa_s3_endpoint_proto }}://{{ noobaa_endpoint }}/"

- when: ocp4_workload_cluster_admins is defined and ocp4_workload_cluster_admins | length > 0
  block:
  - name: Create cluster-admins group
    k8s:
      definition: "{{ lookup('template', 'cluster-admins.group.yaml.j2') }}"
  - name: Create cluster-admins group cluster role binding
    k8s:
      definition: "{{ lookup('file', 'cluster-admins-group.clusterrolebinding.yaml') }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
